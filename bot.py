import json
import os
from datetime import datetime, timezone
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

TOKEN = os.environ.get("TOKEN")
if not TOKEN:
    raise ValueError("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ TOKEN —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")

DATA_DIR = "/data"
DATA_FILE = os.path.join(DATA_DIR, "data.json")
os.makedirs(DATA_DIR, exist_ok=True)

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(user_data, f, ensure_ascii=False, indent=2)

user_data = load_data()
last_reminder_hour = {}  # –æ—Å—Ç–∞–Ω–Ω—î –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø–æ –∫–æ–∂–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É

WELCOME_TEXT = (
    "–©–æ–± –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞ - /start.\n"
    "–ü–∏—Å–∞—Ç–∏ –ª–∏—à–µ +1;-10;+107;-2.\n"
    "–©–æ–± —Å–∫–∏–Ω—É—Ç–∏ —Ü–∏—Ñ—Ä–∏ –Ω–∞–ø–∏—à–∏ /reset\n"
    "–¶–∏—Ñ—Ä–∏ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –∑—ñ –∑–Ω–∞–∫–æ–º.\n"
    "–ö–æ–∂–Ω–æ–≥–æ –¥–Ω—è –≤ 20:00 UTC –±—É–¥–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ¬´–ø—Ä–æ–∫—Ä—É—Ç–∏ –∞–ª—å—Ñ—É¬ª, "
    "–ø–∏—à–∏ ¬´–ø—Ä–æ–∫—Ä—É—Ç–∏–≤¬ª, —è–∫—â–æ –Ω–µ –Ω–∞–ø–∏—Å–∞–≤ —á–µ—Ä–µ–∑ –≥–æ–¥–∏–Ω—É –∑–Ω–æ–≤—É –ø—Ä–∏–π–¥–µ —Ç–∞–∫–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.\n"
    "–ü–ò–°–ê–¢–ò –õ–ò–®–ï –¶–ò–§–†–ò –¢–ê ¬´–ü–†–û–ö–†–£–¢–ò–í¬ª, —Ü–µ–π –±–æ—Ç –±—ñ–ª—å—à–µ –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–∑—É–º—ñ—î))"
)

# ---------- HANDLERS ----------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id not in user_data:
        user_data[user_id] = {"plus": 0.0, "minus": 0.0, "ack": False}
        save_data()
    await update.message.reply_text(WELCOME_TEXT)

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_data[user_id] = {"plus": 0.0, "minus": 0.0, "ack": False}
    save_data()
    await update.message.reply_text("‚úÖ –î–∞–Ω—ñ —Å–∫–∏–Ω—É—Ç–æ. –ü–æ—á–∏–Ω–∞–π —Å–ø–æ—á–∞—Ç–∫—É!")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    text = update.message.text.strip().lower()

    if user_id not in user_data:
        user_data[user_id] = {"plus": 0.0, "minus": 0.0, "ack": False}
        await update.message.reply_text(WELCOME_TEXT)

    if text == "–ø—Ä–æ–∫—Ä—É—Ç–∏–≤":
        user_data[user_id]["ack"] = True
        save_data()
        return

    if text.startswith(("+", "-")):
        try:
            number = float(text)
            if number > 0:
                user_data[user_id]["plus"] += number
            else:
                user_data[user_id]["minus"] += abs(number)
            save_data()
            total_plus = user_data[user_id]["plus"]
            total_minus = user_data[user_id]["minus"]
            balance = total_plus - total_minus
            await update.message.reply_text(
                f"‚úÖ –ü–ª—é—Å: {total_plus}\n‚ùå –ú—ñ–Ω—É—Å: {total_minus}\nüí∞ –ë–∞–ª–∞–Ω—Å: {balance}"
            )
        except ValueError:
            await update.message.reply_text("–ü–∏—à—ñ—Ç—å –ª–∏—à–µ —á–∏—Å–ª–∞ –∑—ñ –∑–Ω–∞–∫–æ–º (+10, -5).")
    else:
        await update.message.reply_text("–ü–∏—à—ñ—Ç—å –ª–∏—à–µ —á–∏—Å–ª–∞ –∑—ñ –∑–Ω–∞–∫–æ–º –∞–±–æ ¬´–ø—Ä–æ–∫—Ä—É—Ç–∏–≤¬ª.")

# ---------- DAILY REMINDER ----------

async def daily_reminder(app):
    from asyncio import sleep
    while True:
        now = datetime.now(timezone.utc)
        for user_id, data in user_data.items():
            last_hour = last_reminder_hour.get(user_id, None)
            if now.hour in [20, 21] and not data.get("ack", False):
                if last_hour != now.hour:
                    await app.bot.send_message(chat_id=int(user_id), text="üåÄ –ü—Ä–æ–∫—Ä—É—Ç–∏ –∞–ª—å—Ñ—É!!!!!!!")
                    last_reminder_hour[user_id] = now.hour
        await sleep(60)

# ---------- RUN ----------

async def on_startup(app):
    app.create_task(daily_reminder(app))

app = ApplicationBuilder().token(TOKEN).post_init(on_startup).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("reset", reset))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

print("ü§ñ –ë–æ—Ç –ø—Ä–∞—Ü—é—î –Ω–∞ Railway Worker!")
app.run_polling()
