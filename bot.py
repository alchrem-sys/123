import json
import os
from datetime import time
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

TOKEN = os.environ.get("TOKEN")
DATA_FILE = "data.json"

# ---------- –î–∞–Ω—ñ ----------
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(user_data, f, ensure_ascii=False, indent=2)

user_data = load_data()

# ---------- –ö–æ–º–∞–Ω–¥–∏ ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id not in user_data:
        user_data[user_id] = {"plus": 0.0, "minus": 0.0, "reminded": False}
        save_data()

    await update.message.reply_text(
        "–©–æ–± –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞ - /start.\n"
        "–ü–∏—Å–∞—Ç–∏ –ª–∏—à–µ +1;-10;+107;-2.\n"
        "–©–æ–± —Å–∫–∏–Ω—É—Ç–∏ —Ü–∏—Ñ—Ä–∏ –Ω–∞–ø–∏—à–∏ /reset\n"
        "–¶–∏—Ñ—Ä–∏ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –∑—ñ –∑–Ω–∞–∫–æ–º.\n"
        "–ö–æ–∂–Ω–æ–≥–æ –¥–Ω—è –≤ 23:00 –ö–∏—ó–≤ –±—É–¥–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ¬´–ü—Ä–æ–∫—Ä—É—Ç–∏ –∞–ª—å—Ñ—É!!!!!!!¬ª.\n"
        "–ü–∏—à–∏ ¬´–ø—Ä–æ–∫—Ä—É—Ç–∏–≤¬ª, —è–∫—â–æ –ø—Ä–æ–∫—Ä—É—Ç–∏–≤.\n"
        "–ü–ò–°–ê–¢–ò –õ–ò–®–ï –¶–ò–§–†–ò –¢–ê ¬´–ü–†–û–ö–†–£–¢–ò–í¬ª, —Ü–µ–π –±–æ—Ç –±—ñ–ª—å—à–µ –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–∑—É–º—ñ—î))"
    )

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_data[user_id] = {"plus": 0.0, "minus": 0.0, "reminded": False}
    save_data()
    await update.message.reply_text("‚úÖ –î–∞–Ω—ñ —Å–∫–∏–Ω—É—Ç–æ. –ü–æ—á–∏–Ω–∞–π —Å–ø–æ—á–∞—Ç–∫—É!")

async def handle_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    text = update.message.text.strip().lower().replace(",", ".")

    if text == "–ø—Ä–æ–∫—Ä—É—Ç–∏–≤":
        if user_id in user_data:
            user_data[user_id]["reminded"] = True
            save_data()
        return

    try:
        number = float(text)
        if user_id not in user_data:
            user_data[user_id] = {"plus": 0.0, "minus": 0.0, "reminded": False}

        if number > 0:
            user_data[user_id]["plus"] += number
        else:
            user_data[user_id]["minus"] += abs(number)

        save_data()

        total_plus = round(user_data[user_id]["plus"], 2)
        total_minus = round(user_data[user_id]["minus"], 2)
        balance = round(total_plus - total_minus, 2)

        await update.message.reply_text(
            f"‚úÖ –ü–ª—é—Å: {total_plus:.2f}\n"
            f"‚ùå –ú—ñ–Ω—É—Å: {total_minus:.2f}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f}"
        )
    except ValueError:
        pass  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –≤—Å–µ, —â–æ –Ω–µ —á–∏—Å–ª–æ —ñ –Ω–µ "–ø—Ä–æ–∫—Ä—É—Ç–∏–≤"

# ---------- –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ----------
async def daily_reminder(context: ContextTypes.DEFAULT_TYPE):
    for user_id, data in user_data.items():
        if not data.get("reminded", False):
            try:
                await context.bot.send_message(
                    chat_id=int(user_id),
                    text="–ü—Ä–æ–∫—Ä—É—Ç–∏ –∞–ª—å—Ñ—É!!!!!!!"
                )
            except:
                pass
        data["reminded"] = False
    save_data()

# ---------- –ó–∞–ø—É—Å–∫ ----------
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_number))

    # JobQueue –¥–ª—è —â–æ–¥–µ–Ω–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –æ 23:00 –ö–∏—ó–≤
    app.job_queue.run_daily(
        daily_reminder,
        time=time(hour=23, minute=0)
    )

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ Railway Worker!")
    await app.run_polling()

import asyncio
asyncio.run(main())
