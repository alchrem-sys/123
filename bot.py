import json
import os
import asyncio
from datetime import datetime, timezone
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# ---------- TOKEN ----------
TOKEN = os.environ.get("TOKEN")
if not TOKEN:
    raise ValueError("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ TOKEN —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")

# ---------- –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø ----------
DATA_DIR = "/data"  # –ø–æ—Å—Ç—ñ–π–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –Ω–∞ Railway (Volume)
DATA_FILE = os.path.join(DATA_DIR, "data.json")

os.makedirs(DATA_DIR, exist_ok=True)

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(user_data, f, ensure_ascii=False, indent=2)

# ---------- –î–ê–ù–Ü ----------
user_data = load_data()
last_ack = None

# ---------- –õ–û–ì–Ü–ö–ê ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id not in user_data:
        user_data[user_id] = {"plus": 0.0, "minus": 0.0}
        save_data()
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! üëã –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —á–∏—Å–ª–æ —Ç–∏–ø—É +40 –∞–±–æ -20.\n"
        "–Ø —Ä–∞—Ö—É—é –∑–∞–≥–∞–ª—å–Ω–∏–π –ø–ª—é—Å, –º—ñ–Ω—É—Å —ñ –±–∞–ª–∞–Ω—Å üí∞"
    )

async def handle_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    text = update.message.text.strip().replace(",", ".")
    if user_id not in user_data:
        user_data[user_id] = {"plus": 0.0, "minus": 0.0}

    try:
        number = float(text)
        if number > 0:
            user_data[user_id]["plus"] += number
        else:
            user_data[user_id]["minus"] += abs(number)
        save_data()

        total_plus = user_data[user_id]["plus"]
        total_minus = user_data[user_id]["minus"]
        balance = total_plus - total_minus

        await update.message.reply_text(
            f"‚úÖ –ü–ª—é—Å: {total_plus}\n‚ùå –ú—ñ–Ω—É—Å: {total_minus}\nüí∞ –ë–∞–ª–∞–Ω—Å: {balance}"
        )

    except ValueError:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —á–∏—Å–ª–æ —Ç–∏–ø—É +50 –∞–±–æ -20.")

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_data[user_id] = {"plus": 0.0, "minus": 0.0}
    save_data()
    await update.message.reply_text("‚úÖ –î–∞–Ω—ñ —Å–∫–∏–Ω—É—Ç–æ. –ü–æ—á–∏–Ω–∞–π —Å–ø–æ—á–∞—Ç–∫—É!")

async def pokrutyv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global last_ack
    last_ack = datetime.now(timezone.utc).hour
    await update.message.reply_text("‚úÖ –î–æ–±—Ä–µ, –Ω–µ –Ω–∞–≥–∞–¥–∞—é —â–µ —Ä–∞–∑!")

# ---------- –ù–ê–ì–ê–î–£–í–ê–ù–ù–Ø ----------
async def daily_reminder(app):
    global last_ack
    while True:
        now = datetime.now(timezone.utc)
        if now.hour in [20, 21]:
            if last_ack != now.hour:
                for user_id in user_data.keys():
                    await app.bot.send_message(chat_id=int(user_id), text="üåÄ –ü–æ–∫—Ä—É—Ç–∏ –∞–ª—å—Ñ—É!!!!!!!")
                last_ack = now.hour
        await asyncio.sleep(60)

# ---------- –ó–ê–ü–£–°–ö ----------
# ---------- –ó–ê–ü–£–°–ö ----------
if __name__ == "__main__":
    import asyncio

    async def runner():
        app = ApplicationBuilder().token(TOKEN).build()

        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("reset", reset))
        app.add_handler(CommandHandler("pokruviv", pokrutyv))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_number))

        asyncio.create_task(daily_reminder(app))
        print("ü§ñ –ë–æ—Ç –ø—Ä–∞—Ü—é—î –Ω–∞ Railway Worker!")
        await app.run_polling()

    loop = asyncio.get_event_loop()
    loop.run_until_complete(runner())
