import json
import os
import asyncio
from threading import Thread
from datetime import datetime, timedelta, timezone
from flask import Flask
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# ---------- TOKEN ----------
TOKEN = os.environ.get("TOKEN")
if not TOKEN:
    raise ValueError("‚ùå TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –î–æ–¥–∞–π –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ —É Render (Name: TOKEN, Value: —Ç–≤—ñ–π —Ç–æ–∫–µ–Ω –≤—ñ–¥ BotFather)")

# ---------- DATA ----------
DATA_FILE = "data.json"

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(user_data, f, ensure_ascii=False, indent=2)

user_data = load_data()

# ---------- TELEGRAM HANDLERS ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id not in user_data:
        user_data[user_id] = {"plus": 0.0, "minus": 0.0, "last_response": None}
        save_data()
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! üëã –Ø –±—É–¥—É –Ω–∞–≥–∞–¥—É–≤–∞—Ç–∏ —Ç–æ–±—ñ –ø–æ–∫—Ä—É—Ç–∏—Ç–∏ –∞–ª—å—Ñ—É —â–æ–¥–Ω—è –æ 20:00 UTC!")

async def handle_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    text = update.message.text.strip().lower()
    if user_id not in user_data:
        user_data[user_id] = {"plus": 0.0, "minus": 0.0, "last_response": None}

    if text == "–ø–æ–∫—Ä—É—Ç–∏–≤":
        user_data[user_id]["last_response"] = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M")
        save_data()
        await update.message.reply_text("üî• –ú–æ–ª–æ–¥–µ—Ü—å! –ü–æ–±–∞—á–∏–º–æ—Å—å –∑–∞–≤—Ç—Ä–∞ üòâ")
        return

    # –∑–≤–∏—á–∞–π–Ω–∞ –ª–æ–≥—ñ–∫–∞ —á–∏—Å–µ–ª
    text = text.replace(",", ".")
    try:
        number = float(text)
        if number > 0:
            user_data[user_id]["plus"] += number
        else:
            user_data[user_id]["minus"] += abs(number)
        save_data()
        total_plus = user_data[user_id]["plus"]
        total_minus = user_data[user_id]["minus"]
        balance = total_plus - total_minus
        await update.message.reply_text(
            f"‚úÖ –ü–ª—é—Å: {total_plus}\n‚ùå –ú—ñ–Ω—É—Å: {total_minus}\nüí∞ –ë–∞–ª–∞–Ω—Å: {balance}"
        )
    except ValueError:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —á–∏—Å–ª–æ —Ç–∏–ø—É +50 –∞–±–æ -20 –∞–±–æ –Ω–∞–ø–∏—à–∏ '–ø–æ–∫—Ä—É—Ç–∏–≤'.")

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_data[user_id] = {"plus": 0.0, "minus": 0.0, "last_response": None}
    save_data()
    await update.message.reply_text("‚úÖ –î–∞–Ω—ñ —Å–∫–∏–Ω—É—Ç–æ. –ü–æ—á–∏–Ω–∞–π —Å–ø–æ—á–∞—Ç–∫—É!")

# ---------- –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ----------
async def send_reminders(app):
    while True:
        now = datetime.now(timezone.utc)
        hour = now.hour

        if hour in [20, 21]:
            for chat_id, data in user_data.items():
                last = data.get("last_response")
                if not last:
                    await app.bot.send_message(chat_id=int(chat_id), text="–ü–æ–∫—Ä—É—Ç–∏ –∞–ª—å—Ñ—É!!!!!!! üî•")
                    continue

                last_dt = datetime.strptime(last, "%Y-%m-%d %H:%M").replace(tzinfo=timezone.utc)
                # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–≤ —Å—å–æ–≥–æ–¥–Ω—ñ
                if last_dt.date() < now.date() and hour >= 20:
                    await app.bot.send_message(chat_id=int(chat_id), text="–ü–æ–∫—Ä—É—Ç–∏ –∞–ª—å—Ñ—É!!!!!!! üî•")

        await asyncio.sleep(3600)  # –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ —â–æ–≥–æ–¥–∏–Ω–∏

# ---------- TELEGRAM ----------
async def run_bot():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_number))

    asyncio.create_task(send_reminders(app))
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ.")
    await app.run_polling()

# ---------- FLASK ----------
flask_app = Flask(__name__)

@flask_app.route("/")
def index():
    return "‚úÖ Telegram –±–æ—Ç –ø—Ä–∞—Ü—é—î –Ω–∞ Render!"

# ---------- MAIN ----------
if __name__ == "__main__":
    # Flask —É –ø–æ—Ç–æ—Ü—ñ
    port = int(os.environ.get("PORT", 10000))
    Thread(target=lambda: flask_app.run(host="0.0.0.0", port=port)).start()

    # –ë–æ—Ç —É –≥–æ–ª–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    asyncio.run(run_bot())
